predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr, n.ahead = 12))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2014)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr, n.ahead = 12))
source("best_model.R")
source("input_data.R")
library(forecast)
library(fpp)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2015)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr, n.ahead = 12))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2015)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2015)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2014)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2014)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2015)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2015)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2015)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2015)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2017)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2014)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2014)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2014)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2017)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2017)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2017)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr,n.ahead = 12))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2017)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr,n.ahead = 48))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2017)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2017)
fitr2 <- arima(train, order = c(1, 0, 0),  period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2017)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2017)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2016)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
train <- window(tsStock, end = 204)
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 204)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
train <- window(tsStock, end = 2014)
fitr2 <- arima(train, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
library(forecast)
AirPassengers
plot(AirPassengers)
data = decompose(AirPassengers)
plot(data)
plot(data$figure, type = 'b')
aa = auto.arima(AirPassengers); aa
fit = arima(AirPassengers, order = c(2, 1, 1), list(order = c(0, 1, 0), period = 12))
fore = predict(fit, n.ahead = 24); fore
U = fore$pred + 2*fore$se
L = fore$pred - 2*fore$se
ts.plot(AirPassengers, fore$pred, U, L, col = c(1, 2, 4, 4), lty = c(1, 1, 2, 2))
source('~/BestStockPredictionTechnique/tmp.R', echo=TRUE)
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
# tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
# train <- window(tsStock, end = 2014)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
# tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
# train <- window(tsStock, end = 2014)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
# tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
# train <- window(tsStock, end = 2014)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predautofitr = window(forecast(fitr2, h = 39)$mean, start = 2016)
print(predict(predautofitr))
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
# tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
# train <- window(tsStock, end = 2014)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
fore = predict(fitr2, n.ahead = 24);
fore
Stockadd = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = Stockadd
# tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
# train <- window(tsStock, end = 2014)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
fore = predict(fitr2, n.ahead = 12);
fore
library(forecast)
AirPassengers
plot(AirPassengers)
data = decompose(AirPassengers)
plot(data)
plot(data$figure, type = 'b')
aa = auto.arima(AirPassengers); aa
fit = arima(AirPassengers, order = c(2, 1, 1), list(order = c(0, 1, 0), period = 12))
fore = predict(fit, n.ahead = 24); fore
U = fore$pred + 2*fore$se
L = fore$pred - 2*fore$se
ts.plot(AirPassengers, fore$pred, U, L, col = c(1, 2, 4, 4), lty = c(1, 1, 2, 2))
library(forecast)
AirPassengers
plot(AirPassengers)
data = decompose(AirPassengers)
plot(data)
plot(data$figure, type = 'b')
aa = auto.arima(AirPassengers); aa
fit = arima(AirPassengers, order = c(2, 1, 1), list(order = c(0, 1, 0), period = 12))
fore = predict(fit, n.ahead = 24); fore
Stock = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predict(fitr2, n.ahead = 12);
fore
Stock = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predict(fitr2, n.ahead = 12);
Stock = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predict(fitr2, n.ahead = 12)
library(forecast)
library(fpp)
Stock = read.table(paste(getwd(), "/input/CUB.NS.csv", sep = ""), sep=",", header=TRUE)
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
plot(tsStock)
tl = seq(2004, 2017,length = length(tsStock))
tl2 = tl^7
polyStock = lm(tsStock ~ tl + tl2)
tsStocktrend1 = ts(polyStock$fit, start = c(2004, 1), frequency = 12)
plot(tsStock, lw = 2, col = "blue", xlim = c(2004, 2017))
lines(tsStocktrend1, lw = 2, col = "red")
abline(v = 2017.25, lty = 2)
stlStock = stl(tsStock, s.window = "periodic")
plot(stlStock, col = "blue", lw = 2)
tsStocktrend2 = stlStock$time.series[ , 2]
plot(forecast(stlStock))
abline(v = 2017.25, lty = 2)
plot(tsStock, lw = 2)
lines(tsStocktrend1, col = 'purple', lw = 2)
lines(tsStocktrend2, col = 'red', lw = 2)
abline(v = 2017.25, lty = 2)
legend("topleft", legend = c("Actual Function", "STL Trend", "Polynomial Trend"),
col = c("black", "red", "purple"), lw = 2)
HWStock1_ng = HoltWinters(tsStocktrend1, gamma = FALSE)
HWStock1 = HoltWinters(tsStocktrend1)
NETfit1 = nnetar(tsStocktrend1)
autofit1 = auto.arima(tsStocktrend1)
fitl1 = tslm(tsStocktrend1 ~ trend + season, lambda = 0)
fitl2 = arima(tsStocktrend1, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 5))
stlStock1 = stl(tsStocktrend1, s.window = "periodic")
plot(forecast(autofit1, h = 24), xlim = c(2004, 2019.2), ylim = c(-50, 250),
lw = 2, col = "red", xlab = "Time", ylab = "Stock Price",
main = "Predictions of the Polynomial Trend")
lines(tsStock, lw = 2)
lines(forecast(stlStock1, h = 24)$mean, col = "red", lw = 2)
lines(forecast(fitl1, h = 24)$mean, col = "orange")
lines(forecast(NETfit1, h = 24)$mean, lw = 2, lty = "longdash", col = "brown")
lines(predict(HWStock1_ng, n.ahead = 24), lw = 2, col = "green")
lines(forecast(fitl2, h = 24)$mean, lw = 2, col = "purple")
lines(predict(HWStock1, n.ahead = 24, prediction.interval = T, level = 0.95)[ , 1],
lw = 2, col = "green")
lines(predict(HWStock1, n.ahead = 24, prediction.interval = T, level = 0.95)[ , 2],
col = "green")
lines(predict(HWStock1, n.ahead = 24, prediction.interval = T, level = 0.95)[ , 3],
col = "green")
legend("topleft", legend = c("Actual Function", "Polynomial Trend",
"Prediction - Holt Winters", "Prediction - Arima (auto)", "Prediction - Arima (fixed)",
"Prediction - Neural Network", "Prediction - Linear Model"),
col = c("black", "red", "green", "blue", "purple", "brown", "orange"), lw = 2)
Stock
Stock = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = ts(Stock$Close)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predict(fitr2, n.ahead = 12)
Stock = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = ts(Stock$Close)
fitr2 <- arima(Stock, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predict(fitr2, n.ahead = 12)
Stock = ts(Stock$Close)
Stock = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = ts(Stock$Close)
fitr2 <- arima(Stock, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predict(fitr2, n.ahead = 12)
Stock
Stock = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
Stock = ts(Stock$Close)
fitr2 <- arima(Stock, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
predict(fitr2, n.ahead = 12)
Stock = read.table(paste(getwd(), "/input/IBM.csv", sep = ""), sep=",", header=TRUE)
fitr2 <- arima(Stock$Close, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 12))
fore = predict(fitr2, n.ahead = 12);
fore
source("best_model.R")
source("input_data.R")
library(forecast)
library(fpp)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
cat("\n\n!!! winning models:", BestPrediction)
table = table(BestPrediction)
as.data.frame(table)
source("best_model.R")
source("input_data.R")
library(forecast)
library(fpp)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
library(forecast)
library(fpp)
# input data
Stock = read.table(paste(getwd(), "/input/CUB.NS.csv", sep = ""), sep=",", header=TRUE)
# Convert data into time series data
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
# input data
Stock = read.table(paste(getwd(), "/input/CUB.NS.csv", sep = ""), sep=",", header=TRUE)
# Convert data into time series data
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
plot(tsStock)
# Actual functions of stock prices can be chaotic and misleading for predictions
# Create polynomial model & convert it into time series data
tl = seq(2004, 2017,length = length(tsStock))
tl2 = tl^7
polyStock = lm(tsStock ~ tl + tl2)
tsStocktrend1 = ts(polyStock$fit, start = c(2004, 1), frequency = 12)
plot(tsStock, lw = 2, col = "blue", xlim = c(2004, 2017))
lines(tsStocktrend1, lw = 2, col = "red")
abline(v = 2017.25, lty = 2)
# Actual functions of stock prices can be chaotic and misleading for predictions
# Create stl model & convert it into time series data
stlStock = stl(tsStock, s.window = "periodic")
plot(stlStock, col = "blue", lw = 2)
tsStocktrend2 = stlStock$time.series[ , 2]
plot(forecast(stlStock))
abline(v = 2017.25, lty = 2)
# Actual function, STL trend, Polynomial trend
plot(tsStock, lw = 2)
lines(tsStocktrend1, col = 'purple', lw = 2)
lines(tsStocktrend2, col = 'red', lw = 2)
abline(v = 2017.25, lty = 2)
legend("topleft", legend = c("Actual Function", "STL Trend", "Polynomial Trend"),
col = c("black", "red", "purple"), lw = 2)
# Holt Winter filtering on polynomial trend with minimized square error & using exponential smoothing
HWStock1_ng = HoltWinters(tsStocktrend1, gamma = FALSE)
# Holt winter filtering on polynomial trend for fit, lwr, upr predictions
HWStock1 = HoltWinters(tsStocktrend1)
# Neural network on polynomial trend (feed-forward type)
NETfit1 = nnetar(tsStocktrend1)
# Arima model on polynomial trend
autofit1 = auto.arima(tsStocktrend1)
# Linear model on polynomial trend (adds trend & season componets to computation)
fitl1 = tslm(tsStocktrend1 ~ trend + season, lambda = 0)
# Arima model on polynomial trend with non-seasonal & seasonal parameters
fit12 = arima(tsStocktrend1, order = c(1, 0, 0), list(order = c(2, 1, 0), period = 5))
# STL model on polynomial trend
stlStock1 = stl(tsStocktrend1, s.window = "periodic")
plot(forecast(autofit1, h = 24), xlim = c(2004, 2019), ylim = c(-50, 250),
lw = 2, col = "red", xlab = "Time", ylab = "Stock Price",
main = "Predictions of the Polynomial Trend")
lines(tsStock, lw = 2)
lines(forecast(stlStock1, h = 24)$mean, col = "red", lw = 2)
lines(forecast(fitl1, h = 24)$mean, col = "orange")
source("best_model.R")
source("input_data.R")
library(forecast)
library(fpp)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
source("best_model.R")
source("input_data.R")
library(forecast)
#library(fpp)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
source("best_model.R")
source("input_data.R")
#library(forecast)
#library(fpp)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
source("best_model.R")
source("input_data.R")
library(forecast)
#library(fpp)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
source("best_model.R")
source("input_data.R")
library(forecast)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
library(forecast)
# input data
Stock = read.table(paste(getwd(), "/input/CUB.NS.csv", sep = ""), sep=",", header=TRUE)
# Convert data into time series data
tsStock = ts(Stock$Close, start = c(2004, 1), frequency = 12)
plot(tsStock)
# Actual functions of stock prices can be chaotic and misleading for predictions
# Create polynomial model & convert it into time series data
tl = seq(2004, 2017,length = length(tsStock))
tl2 = tl^7
polyStock = lm(tsStock ~ tl + tl2)
tsStocktrend1 = ts(polyStock$fit, start = c(2004, 1), frequency = 12)
plot(tsStock, lw = 2, col = "blue", xlim = c(2004, 2017))
lines(tsStocktrend1, lw = 2, col = "red")
abline(v = 2017.25, lty = 2)
# Actual functions of stock prices can be chaotic and misleading for predictions
# Create stl model & convert it into time series data
stlStock = stl(tsStock, s.window = "periodic")
plot(stlStock, col = "blue", lw = 2)
tsStocktrend2 = stlStock$time.series[ , 2]
# Actual functions of stock prices can be chaotic and misleading for predictions
# Create stl model & convert it into time series data
stlStock = stl(tsStock, s.window = "periodic")
plot(stlStock, col = "blue", lw = 5)
source("best_model.R")
source("input_data.R")
library(forecast)
stockVector = list()
stockVector = input_data(stockVector)
BestPrediction = vector()
for(i in 1:length(stockVector))
{
cat("\n*** Predicting Stock Data No. ",i);
BestPrediction[i] = findBestModel(stockVector[[i]])
}
cat("\n\n!!! winning models:", BestPrediction)
table = table(BestPrediction)
as.data.frame(table)
